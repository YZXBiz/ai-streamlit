name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # Temporarily commenting out tests for initial deployment
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.11'
  #
  #     - name: Install uv
  #       run: |
  #         curl -Ls https://astral.sh/uv/install.sh | bash
  #         export PATH="$HOME/.cargo/bin:$PATH"
  #
  #     - name: Set up environment
  #       run: |
  #         cp .env.example .env
  #
  #     - name: Install dependencies
  #       run: |
  #         uv sync
  #
  #     - name: Lint with ruff
  #       run: |
  #         uv run -m ruff check src tests
  #
  #     - name: Type check with mypy
  #       run: |
  #         uv run -m mypy src
  #
  #     - name: Run tests
  #       run: |
  #         uv run -m pytest tests -v

  build-docker:
    # needs: test
    runs-on: ubuntu-latest
    # if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: flatbot:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm flatbot:${{ github.sha }} echo "Container test successful"

  deploy:
    needs: build-docker
    # if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push to ACR
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.ACR_LOGIN_SERVER }}/flatbot:${{ github.sha }}
            ${{ secrets.ACR_LOGIN_SERVER }}/flatbot:latest

      - name: Create/Update Container Instance
        run: |
          # Create Container Instance if it doesn't exist
          az container create \
            --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
            --name flatbot-container \
            --image ${{ secrets.ACR_LOGIN_SERVER }}/flatbot:latest \
            --dns-name-label flatbot-${{ github.sha }} \
            --ports 8501 \
            --registry-login-server ${{ secrets.ACR_LOGIN_SERVER }} \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --location westus2 \
            --cpu 0.5 \
            --memory 1.0

      - name: Output app URL
        run: |
          FQDN=$(az container show --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} --name flatbot-container --query ipAddress.fqdn -o tsv)
          echo "Application deployed to: http://${FQDN}:8501"
