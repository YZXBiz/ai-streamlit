"""Tests for CSVWriter class."""

import os
from pathlib import Path

import polars as pl
from clustering.io.readers.csv_reader import CSVReader
from clustering.io.writers.csv_writer import CSVWriter


def test_csv_writer_creation():
    """Test CSVWriter initialization."""
    # Test with default parameters
    writer = CSVWriter(path="/path/to/file.csv")
    assert writer.path == "/path/to/file.csv"
    assert writer.delimiter == ","
    assert writer.include_header is True
    assert writer.include_bom is False

    # Test with custom parameters
    writer = CSVWriter(
        path="/path/to/file.csv",
        delimiter="|",
        include_header=False,
        include_bom=True,
    )
    assert writer.path == "/path/to/file.csv"
    assert writer.delimiter == "|"
    assert writer.include_header is False
    assert writer.include_bom is True


def test_csv_writer_write(temp_dir, sample_data):
    """Test CSVWriter write method."""
    file_path = temp_dir / "test_output.csv"
    writer = CSVWriter(path=str(file_path))

    # Write data to the file
    writer.write(sample_data)

    # Check that the file was created
    assert Path(file_path).exists()

    # Read the file back and check the contents
    reader = CSVReader(path=str(file_path))
    result = reader.read()

    # Check that the data was written correctly
    assert isinstance(result, pl.DataFrame)
    assert result.shape == sample_data.shape
    assert result.columns == sample_data.columns

    # Check that the values match
    for col in result.columns:
        assert result[col].to_list() == sample_data[col].to_list()

    # Cleanup
    os.remove(file_path)


def test_csv_writer_custom_delimiter(temp_dir, sample_data):
    """Test CSVWriter with a custom delimiter."""
    file_path = temp_dir / "test_pipe.csv"
    writer = CSVWriter(path=str(file_path), delimiter="|")

    # Write data to the file
    writer.write(sample_data)

    # Check that the file was created
    assert Path(file_path).exists()

    # Read the file back with the correct delimiter
    reader = CSVReader(path=str(file_path), delimiter="|")
    result = reader.read()

    # Check that the data was written correctly
    assert isinstance(result, pl.DataFrame)
    assert result.shape == sample_data.shape
    assert result.columns == sample_data.columns

    # Cleanup
    os.remove(file_path)


def test_csv_writer_no_header(temp_dir, sample_data):
    """Test CSVWriter without a header."""
    file_path = temp_dir / "test_no_header.csv"
    writer = CSVWriter(path=str(file_path), include_header=False)

    # Write data to the file
    writer.write(sample_data)

    # Check that the file was created
    assert Path(file_path).exists()

    # Read the file back without header expectations
    result = pl.read_csv(file_path, has_header=False)

    # Without a header, column names will be autogenerated and data will include the header row
    assert result.shape[0] == sample_data.shape[0] + 1

    # Cleanup
    os.remove(file_path)
