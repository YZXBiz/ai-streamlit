# =========================================
# Build System & Project Metadata
# =========================================

[build-system]
requires = ["hatchling>=1.26.0"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

# =========================================
# Project Core Metadata
# =========================================

[project]
name = "clustering"
version = "0.1.0"
description = "A data clustering pipeline using Dagster"
readme = "README.md"
requires-python = ">=3.10"
authors = [{ name = "Jackson Yang", email = "Jackson.Yang@cvshealth.com" }]
keywords = ["clustering", "fsassortment", "dagster", "pipeline"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
]

dependencies = [
    # === Core Platform ===
    "dagster>=1.6.0",
    "dagster-webserver>=1.10.4",

    # === Core Utilities ===
    "pandas>=2.1.4",
    "numpy>=1.26.0,<2.0.0",
    "pydantic>=2.10.3",
    "pydantic-settings>=2.6.1",
    "rich>=13.0.0",
    "loguru>=0.7.2",
    "matplotlib>=3.7.0,<3.8.0",
    "scikit-learn>=1.3.2,<1.5.0",

    # === Dev Utilities ===
    "ipykernel>=6.29.5",
    "psutil>=6.1.0",
    "setuptools>=75.6.0",
    "pre-commit>=4.2.0",

    # === Core Project Modules ===
    "clustering-pipeline",
    "clustering-shared",
    "clustering-cli",
    "clustering-dashboard",
]

# =========================================
# Entry Points
# =========================================

[project.scripts]
clustering = "clustering.cli.commands:main"

# =========================================
# URLs
# =========================================

[project.urls]
# "Documentation" = 
"Source Code" = "https://github.com/yourusername/clustering-dagster"
"Issue Tracker" = "https://github.com/yourusername/clustering-dagster/issues"

# =========================================
# Optional Dependencies
# =========================================

# [project.optional-dependencies]
# Optional extras for users who need dashboard
# dashboard = ["clustering-dashboard"]
# all = ["clustering-dashboard"]

# =========================================
# Development Dependencies
# =========================================

[dependency-groups]
dev = [
    # Development dependencies
    "mypy>=1.15.0",
    "pyright>=1.1.399",
    "ruff>=0.11.5",
    "pre-commit>=3.5.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
]
cli = ["clustering-cli"]
dashboard = ["clustering-dashboard"]
docs = [
    "sphinx>=8.1.3",
    "sphinx-autobuild>=2024.10.3",
    "sphinx-autodoc-typehints>=3.0.1",
    "sphinx-rtd-theme>=3.0.2",
    "nbconvert>=7.16.6",
]

# =========================================
# UV Configuration
# =========================================

[tool.uv]
default-groups = ["dev"]

[tool.uv.workspace]
members = [
    "clustering-dashboard",
    "clustering-cli",
    "clustering-shared",
    "clustering-pipeline",
]

[tool.uv.sources]
clustering-shared = { workspace = true }
clustering-pipeline = { workspace = true }
clustering-cli = { workspace = true }
clustering-dashboard = { workspace = true }

# =========================================
# Build Configuration
# =========================================

[tool.hatch.build.targets.wheel]
packages = [
    "clustering-pipeline",
    "clustering-shared",
    "clustering-cli",
    "clustering-dashboard",
]

# =========================================
# Code Quality & Linting Configuration
# =========================================

[tool.ruff]
# Basic configuration
target-version = "py310"
line-length = 100
fix = true               # Automatically fix violations when possible
unsafe-fixes = true      # Ensure unsafe fixes are also attempted
# Exclude directories not relevant to the core code
exclude = [
    ".git",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "experiments",
    "data",
    "cache",
    "logs",
    "dagster_home",
    "storage",
    "docs/build",
    "documents",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "N",  # pep8-naming
    "UP", # pyupgrade
    "D",  # pydocstyle
]
# Explicitly make type annotation modernization rules fixable and ensure they're selected
fixable = ["UP006", "UP007", "UP035"]
# Force the type hint update rules to be applied
extend-select = ["UP006", "UP007", "UP035"]
ignore = [
    "D203", # one-blank-line-before-class (conflicts with no-blank-line-before-class)
    "D212", # multi-line-summary-first-line (conflicts with multi-line-summary-second-line)
    "N805", # first argument is self
    "F405", # star imports are not allowed
    "N806", # Upper case letters are not allowed in function names
    "E501", # Line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
]
"src/clustering/dagster/**/*.py" = [
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "B007", # Loop control variable not used within loop body
    "B008", # Do not perform function call in argument defaults
]
"src/clustering/io/readers/**/*.py" = [
    "B904", # Use raise from for exception chaining
]
"src/clustering/io/writers/**/*.py" = [
    "B904", # Use raise from for exception chaining
]
"src/clustering/core/sql_templates.py" = ["E501"]
"src/clustering/dagster/assets/clustering/internal.py" = ["E501"]
"src/clustering/dagster/definitions.py" = ["E501"]

# Isort settings
[tool.ruff.lint.isort]
known-first-party = ["clustering"]

# Docstring style
[tool.ruff.lint.pydocstyle]
convention = "google"

# Modern Python type annotations
[tool.ruff.lint.pyupgrade]
keep-runtime-typing = false

# =========================================
# Type Checking Configuration
# =========================================

[tool.mypy]
python_version = "3.10"
ignore_errors = false
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = ["tests.*", "scripts.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Pyright configuration
[tool.pyright]
include = ["src"]
exclude = [
    "**/__pycache__",
    "**/.mypy_cache",
    "**/.pytest_cache",
    "dagster_home",
]
ignore = ["tests", "scripts", "dagster_home"]
reportGeneralTypeIssues = "warning"
reportPrivateImportUsage = "warning"
reportAttributeAccessIssue = "warning"
reportArgumentType = "warning"
reportCallIssue = "warning"
reportReturnType = "warning"
reportIncompatibleMethodOverride = "warning"
reportAbstractUsage = "warning"
reportOptionalMemberAccess = "warning"
reportOperatorIssue = "warning"
reportMissingImports = "warning"
reportInvalidTypeForm = "warning"
reportUnusedExcept = "warning"
typeCheckingMode = "basic"

# =========================================
# Testing Configuration
# =========================================

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
pythonpath = [".", "src"]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "scripts/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

# =========================================
# Dagster Configuration
# =========================================
[tool.dagster]
module_name = "clustering.pipeline.definitions"
