# =============================================
# PROJECT CONFIGURATION
# =============================================

# Build System
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Core Metadata
[project]
name = "data-analyzer"
version = "0.1.0"
authors = [{ name = "Your Name", email = "you@example.com" }]
description = "A framework for managing and analyzing pandas DataFrames"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

# Project Dependencies
dependencies = [
    "pandas>=2.0.0",
    "streamlit>=1.24.0",
    "sqlalchemy>=2.0.0",
    "pytest>=7.0.0",
    "pyarrow>=12.0.0",
    "fastapi==0.103.1",
    "pandasai>=3.0.0a16,<4.0.0", # Pin to v3 alpha
    "uvicorn>=0.22.0",
    "python-multipart>=0.0.6",
    "asyncpg>=0.27.0",
    "psycopg2-binary>=2.9.6",
    "pytest-asyncio>=0.26.0",
    "duckdb==1.2.2",
    "faiss-cpu==1.7.4",
    "scikit-learn>=1.6.1",
    "pytest-cov>=6.1.1",
    "ruff>=0.11.7",
    "passlib>=1.7.4",
    "python-jose>=3.3.0",
    "sentence-transformers>=2.4.0,<3.0.0",
    "pydantic-settings>=2.9.1",
    "email-validator>=2.0.0",
    "httpx==0.24.1", # Version compatible with FastAPI 0.103.1 and starlette 0.27.0
    "torch==2.2.2", # Last version supporting macOS x86_64
    "openai>=1.76.0",
    "pandasai-openai>=0.1.5",
    "extra-streamlit-components>=0.1.60",
    "streamlit-cookies-manager>=0.2.0",
]

# Project URLs
[project.urls]
"Source Code" = "https://github.com/yourusername/chatbot-assortment"
"Issue Tracker" = "https://github.com/yourusername/chatbot-assortment/issues"
"Documentation" = "https://yourusername.github.io/chatbot-assortment"

# Entry point
[project.scripts]
backend-api = "backend.run:main"
frontend-app = "frontend.app:main"

# =============================================
# DEVELOPMENT TOOLS
# =============================================

# Development Dependencies
[dependency-groups]
dev = [
    "black>=23.0.0",
    "ipykernel>=6.29.5",
    "isort>=5.0.0",
    "mypy>=1.0.0",
    "pylint>=2.0.0",
]
test = ["pytest>=7.0.0", "pytest-cov>=4.0.0"]

docs = [
    # Documentation
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.2",
    "sphinxcontrib-napoleon>=0.7",
]

# Package Management
[tool.uv]
default-groups = ["dev", "docs"]

# Build Configuration
[tool.setuptools]
package-dir = { "" = "." }

[tool.setuptools.packages.find]
where = ["."]

# Add these lines to fix the packaging issue
[tool.hatch.build.targets.wheel]
packages = ["backend", "frontend"]

# =============================================
# CODE QUALITY TOOLS
# =============================================

# Ruff Configuration
[tool.ruff]
# Basic configuration
target-version = "py310"
line-length = 100
fix = true
unsafe-fixes = true
exclude = [
    ".git",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "data",
    "cache",
]

[tool.ruff.lint]
select = ["E", "F", "I", "N", "B", "UP", "C", "A", "T", "Q"]
fixable = ["UP006", "UP007", "UP035"]
extend-select = ["UP006", "UP007", "UP035"]
ignore = ["E203", "E501", "T201", "B008"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
]

[tool.ruff.lint.isort]
known-first-party = ["backend", "frontend"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = false

# Type Checking
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "duckdb.*",
    "llama_index.*",
    "pandasai.*",
    "faiss.*",
    "sklearn.*",
    "scipy.*",
]
ignore_missing_imports = true

# Pyright Configuration
[tool.pyright]
include = ["backend", "frontend"]
exclude = ["**/__pycache__", "**/.mypy_cache", "**/.pytest_cache"]

# Formatting
[tool.black]
line-length = 100
target-version = ["py310"]

# Testing
[tool.pytest.ini_options]
testpaths = ["tests", "backend/tests", "frontend/tests"]
python_files = "test_*.py"

[tool.isort]
profile = "black"
line_length = 100
