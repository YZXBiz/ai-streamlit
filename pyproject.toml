[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[project]
name = "clustering"
version = "0.1.0"
description = "A data clustering pipeline using Dagster"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [{ name = "Jackson Yang", email = "developer@example.com" }]
dependencies = [
    # Core dependencies
    "dagster>=1.6.0",
    "dagster-duckdb-polars>=0.21.0",
    "polars>=0.20.0",
    "duckdb>=1.2.1",                 # Using higher version constraint
    # Data processing
    "pandas>=2.1.4",              # Using higher version constraint
    "scikit-learn>=1.0.0,<1.5.0", # Combined constraints for compatibility with pycaret==3.3.2
    "numba>=0.60.0",
    "numpy>=1.26.0,<2.0.0",       # Constrained for compatibility with pandas==2.1.4
    "pandera[polars]>=0.21.0",
    "dask>=2025.2.0",
    # Visualization
    "matplotlib<3.8.0",
    "plotly>=5.24.1",
    "kaleido @ https://files.pythonhosted.org/packages/45/8e/4297556be5a07b713bb42dde0f748354de9a6918dee251c0e6bdcda341e7/kaleido-0.2.1-py2.py3-none-macosx_11_0_arm64.whl",
    "yellowbrick>=1.5",
    # Utilities
    "pydantic>=2.10.3",         # Using higher version constraint
    "pydantic-settings>=2.6.1",
    "omegaconf>=2.3.0",
    "rich>=13.0.0",
    "loguru>=0.7.2",
    "psutil>=6.1.0",
    "plyer>=2.1.0",
    "ipykernel>=6.29.5",
    "setuptools>=75.6.0",
    "shap>=0.46.0",
    "openpyxl>=3.1.5",
    "fastexcel>=0.13.0",
    # Machine learning frameworks
    "pycaret",
    "mlflow>=2.16.0",
    "clustpy[full]>=0.0.2",
    # Cloud and storage
    "azure-identity>=1.21.0",
    "azure-storage-blob>=12.25.0",
    "snowflake-connector-python>=3.13.2",
    # Database and query engines
    "pyarrow<19.0.0",
    "sqlalchemy<2.0",
    # Workflow orchestration
    "apache-airflow>=2.10.5",
    "dagster-webserver>=1.10.4",
    # Version control and task automation
    "poethepoet",
    "dvc[azure]>=3.59.1",
    "dagster-pandera>=0.26.9",
    "dagster-mlflow",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest",
    "pytest-cov",

    # Linting & formatting
    "ruff",
    "mypy",
    "pre-commit",

    # Package management
    "uv",

    # Documentation (included in dev for convenience)
    "sphinx",
    "sphinx-rtd-theme",
    "sphinx-autodoc-typehints",
]

# Separate docs dependencies for those who only want documentation tools
docs = [
    # Documentation
    "sphinx",
    "sphinx-rtd-theme",
    "sphinx-autodoc-typehints",
]

[dependency-groups]
docs = [
    "sphinx>=8.1.3",
    "sphinx-autobuild>=2024.10.3",
    "sphinx-autodoc-typehints>=3.0.1",
    "sphinx-rtd-theme>=3.0.2",
]

[tool.uv.sources]
kaleido = { url = "https://files.pythonhosted.org/packages/45/8e/4297556be5a07b713bb42dde0f748354de9a6918dee251c0e6bdcda341e7/kaleido-0.2.1-py2.py3-none-macosx_11_0_arm64.whl" }
# pycaret = { git = "https://github.com/Jackson-Yang_cvsh/modified-pycaret.git" }

[tool.ruff]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "N",  # pep8-naming
    "UP", # pyupgrade
    "D",  # pydocstyle
]
ignore = [
    "D203", # one-blank-line-before-class (conflicts with no-blank-line-before-class)
    "D212", # multi-line-summary-first-line (conflicts with multi-line-summary-second-line)
    "N805", # first argument is self
    "F405", # star imports are not allowed
]

[tool.ruff.lint.isort]
known-first-party = ["clustering"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
]
# Additional ignores for specific files with many issues
"src/clustering/dagster/**/*.py" = [
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "B007", # Loop control variable not used within loop body
    "B008", # Do not perform function call in argument defaults
]
"src/clustering/io/readers/**/*.py" = [
    "B904", # Use raise from for exception chaining
]
"src/clustering/io/writers/**/*.py" = [
    "B904", # Use raise from for exception chaining
]
# Specific files with line length issues
"src/clustering/core/sql_templates.py" = ["E501"]
"src/clustering/dagster/assets/clustering/internal.py" = ["E501"]
"src/clustering/dagster/definitions.py" = ["E501"]

# Additional linting rules
ignore = [
    "D203", # one-blank-line-before-class (conflicts with no-blank-line-before-class)
    "D212", # multi-line-summary-first-line (conflicts with multi-line-summary-second-line)
    "E501", # Line too long (handled by formatter)
]

[tool.mypy]
python_version = "3.10"
ignore_errors = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = ["tests.*", "scripts.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
pythonpath = [".", "src"]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "scripts/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.dagster]
module_name = "clustering.dagster"
