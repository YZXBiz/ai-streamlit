# =============================================
# PROJECT CONFIGURATION
# =============================================

# Build System
[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

# Core Metadata
[project]
name = "chatbot"
version = "0.1.0"
description = "A web-based chatbot application for data exploration and analysis"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
authors = [{ name = "Data Chat Team" }]
keywords = ["chatbot", "data", "analysis"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
]

# Project Dependencies
dependencies = [
    # Core libraries
    "streamlit>=1.30.0",
    "duckdb>=0.9.0",
    "pandas>=2.0.0",
    "pyarrow>=14.0.0",
    # LLM integration
    "llama-index>=0.9.0", # Use the unified package
    "openai>=1.0.0",
    # Database integrations
    "sqlalchemy>=1.4.0, <2.0.0",
    "duckdb-engine>=0.17.0",
    # File handling
    "openpyxl>=3.1.2",
    # Configuration and logging
    "python-dotenv>=1.0.0",
    "pydantic-settings>=2.0.0",
    "loguru>=0.7.0",
]

# Project URLs
[project.urls]
"Source Code" = "https://github.com/yourusername/chatbot-assortment"
"Issue Tracker" = "https://github.com/yourusername/chatbot-assortment/issues"
"Documentation" = "https://yourusername.github.io/chatbot-assortment"

# Entry point
[project.scripts]
flat-chatbot = "chatbot.app:main"

# =============================================
# DEVELOPMENT TOOLS
# =============================================

# Development Dependencies
[dependency-groups]
dev = [
    # Testing and code quality
    "mypy>=1.3.0",
    "ruff>=0.0.270",
    "black>=23.3.0",
    "pytest>=7.3.1",
    "pytest-cov>=6.1.1", # Added pytest-cov for coverage reporting
    "pylint>=3.3.6",

    # Type checking stubs
    "pandas-stubs>=2.2.3.250308",
    "types-pytz>=2025.2.0.20250326",

    # Development environment
    "ipykernel>=6.29.5",
]

docs = [
    # Documentation
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.2",
    "sphinxcontrib-napoleon>=0.7",
]

# Package Management
[tool.uv]
default-groups = ["dev", "docs"]

# Build Configuration
[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]

# =============================================
# CODE QUALITY TOOLS
# =============================================

# Ruff Configuration
[tool.ruff]
# Basic configuration
target-version = "py310"
line-length = 100
fix = true
unsafe-fixes = true
exclude = [
    ".git",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "data",
    "cache",
]

[tool.ruff.lint]
select = ["E", "F", "I", "N", "B", "UP", "C", "A", "T", "Q"]
fixable = ["UP006", "UP007", "UP035"]
extend-select = ["UP006", "UP007", "UP035"]
ignore = ["E203", "E501", "T201"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
]

[tool.ruff.lint.isort]
known-first-party = ["src/chatbot"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = false

# Type Checking
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = ["streamlit.*", "duckdb.*", "llama_index.*"]
ignore_missing_imports = true

# Pyright Configuration
[tool.pyright]
include = ["src/chatbot"]
exclude = ["**/__pycache__", "**/.mypy_cache", "**/.pytest_cache"]

# Formatting
[tool.black]
line-length = 100
target-version = ["py310"]

# Testing
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
