[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "clustering"
version = "0.1.0"
description = "A data clustering pipeline using Dagster"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [{ name = "Developer", email = "developer@example.com" }]
dependencies = [
    # Core dependencies
    "dagster>=1.6.0",
    "dagster-duckdb-polars>=0.21.0",
    "polars>=0.20.0",
    "duckdb>=0.9.0",

    # Data processing
    "pandas>=2.0.0",
    "scikit-learn>=1.0.0",

    # Utilities
    "pydantic>=2.0.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",

    # Linting & formatting
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",

    # Package management
    "uv>=0.1.0",
]

[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "N",  # pep8-naming
    "UP", # pyupgrade
    "D",  # pydocstyle
]
ignore = [
    "D203", # one-blank-line-before-class (conflicts with no-blank-line-before-class)
    "D212", # multi-line-summary-first-line (conflicts with multi-line-summary-second-line)
]

[tool.ruff.isort]
known-first-party = ["clustering"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
]

[tool.ruff.lint]
ignore = ['F107']

# [tool.mypy]
# python_version = "3.10"
# warn_return_any = true
# warn_unused_configs = true
# disallow_untyped_defs = true
# disallow_incomplete_defs = true
# plugins = ["pydantic.mypy"]

# [[tool.mypy.overrides]]
# module = ["tests.*", "scripts.*"]
# disallow_untyped_defs = false
# disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
pythonpath = [".", "src"]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "scripts/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
