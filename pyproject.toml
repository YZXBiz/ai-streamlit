[project]
name = "clustering"
version = "0.1.0"
description = "Best practices and design patterns in Python"
authors = [{ name = "Jackson Yang", email = "Jackson.Yang@cvshealth.com" }]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.10"
dependencies = [
    "clustpy",
    "dagster>=1.5.0",
    "dagster-duckdb",
    "dagster-duckdb-pandas",
    "dagster-webserver",
    "pandera>=0.17.0",
    "pandas",
    "polars",
    "pycaret",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.0.0",
    "scikit-learn>=1.3.0",
    "scipy",
    "yellowbrick",
    "boto3>=1.28.0",
    "requests>=2.31.0",
    "pyyaml>=6.0",
]

[build-system]
requires = ["setuptools>=65.0.0", "wheel>=0.37.0"]
build-backend = "setuptools.build_meta"

[tool.pytest]
addopts = "--cov=clustering"
testpaths = ["tests"]

[tool.ruff]
# Enable all rules by default
select = [
    "E",
    "F",
    "B",
    "I",
    "N",
    "D",
    "UP",
    "S",
    "BLE",
    "A",
    "C4",
    "T10",
    "EM",
    "EXE",
    "ISC",
    "ICN",
    "G",
    "INP",
    "PIE",
    "T20",
    "PYI",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SIM",
    "ARG",
    "PTH",
    "ERA",
    "TRY",
    "FLY",
    "SLOT",
    "RUF",
]
ignore = [
    "D203",    # one-blank-line-before-class (incompatible with D211)
    "D212",    # multi-line-summary-first-line (incompatible with D213)
    "UP037",   # quotes (incompatible with our format)
    "ISC001",  # single-line-implicit-string-concatenation (incompatible with our format)
    "S101",    # use of assert detected (pytest relies heavily on this)
    "A003",    # shadowing a builtin (e.g. "id", "type", etc.), we use them heavily as variable names
    "PLR0913", # too many arguments to function call (opinionated)
    "EM101",   # Exception must not use a string literal, use an exception class
    "FBT001",  # Boolean positional arg in function definition
    "FBT002",  # Boolean default value in function definition
    "PLR2004", # Magic value used in comparison, consider replacing with a constant
]
unfixable = ["F401", "F841"]
line-length = 100
target-version = "py310"

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "E402"]
"tests/*" = ["D101", "D102", "D103", "S101", "PLR2004"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
docstring-code-line-length = 80

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "numpy.*",
    "pytest.*",
    "sklearn.*",
    "scipy.*",
    "pycaret.*",
    "clustpy.*",
    "yellowbrick.*",
    "dagster.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]         # allow use of assert

[tool.coverage.run]
source = ["clustering"]
omit = ["*/tests/*", "*/__main__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
