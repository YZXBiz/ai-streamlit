# =========================================
# Build System & Project Metadata
# =========================================

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.hatch.metadata]
allow-direct-references = true

# =========================================
# Project Core Metadata
# =========================================

[project]
name = "chatbot-assortment"
version = "0.1.0"
description = "A web-based chatbot application for data exploration and analysis"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
authors = [{ name = "Data Chat Team" }]
keywords = ["assortment", "chatbot", "data", "analysis"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
]

dependencies = [
    "streamlit>=1.30.0",
    "duckdb>=0.9.0",
    "pandas>=2.0.0",
    "openpyxl>=3.1.2",
    "llama-index-core>=0.10.0",
    "llama-index-readers-file>=0.1.0",
    "llama-index-embeddings-openai>=0.1.0",
    "llama-index-legacy>=0.9.0",
    "openai>=1.0.0",
    "python-dotenv>=1.0.0",
    "pydantic-settings>=2.0.0",
    "sqlalchemy>=1.4.0, <2.0.0",
    "pyarrow>=14.0.0",
    "duckdb-engine>=0.17.0",
    "loguru>=0.7.0",
    "llama-index-llms-openai>=0.3.38",
]

# =========================================
# URLs
# =========================================

[project.urls]
"Source Code" = "https://github.com/yourusername/chatbot-assortment"
"Issue Tracker" = "https://github.com/yourusername/chatbot-assortment/issues"
"Documentation" = "https://yourusername.github.io/chatbot-assortment"

# Entry point for the dashboard
[project.scripts]
flat-chatbot = "flat_chatbot.app:main"

# =========================================
# Development Dependencies
# =========================================

[dependency-groups]
dev = [
    # Development dependencies
    "mypy>=1.3.0",
    "ruff>=0.0.270",
    "black>=23.3.0",
    "pytest>=7.3.1",
    "pandas-stubs>=2.2.3.250308",
    "types-pytz>=2025.2.0.20250326",
    "pylint>=3.3.6",
    "ipykernel>=6.29.5",
]

docs = [
    # Documentation dependencies
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.2",
    "sphinxcontrib-napoleon>=0.7",
]

# =========================================
# UV Configuration
# =========================================

[tool.uv]
default-groups = ["dev", "docs"]

# =========================================
# Build Configuration
# =========================================

[tool.hatch.build.targets.wheel]
packages = ["flat_chatbot"]

[tool.setuptools]
package-dir = { "" = "." }
packages = ["flat_chatbot"]

# =========================================
# Code Quality & Linting Configuration
# =========================================

[tool.ruff]
# Basic configuration
target-version = "py310"
line-length = 100
fix = true               # Automatically fix violations when possible
unsafe-fixes = true      # Ensure unsafe fixes are also attempted
# Exclude directories not relevant to the core code
exclude = [
    ".git",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "data",
    "cache",
]

[tool.ruff.lint]
select = ["E", "F", "I", "N", "B", "UP", "C", "A", "T", "Q"]
# Explicitly make type annotation modernization rules fixable and ensure they're selected
fixable = ["UP006", "UP007", "UP035"]
# Force the type hint update rules to be applied
extend-select = ["UP006", "UP007", "UP035"]
ignore = ["E203", "E501", "T201"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
]

# Isort settings
[tool.ruff.lint.isort]
known-first-party = ["flat_chatbot"]

# Docstring style
[tool.ruff.lint.pydocstyle]
convention = "google"

# Modern Python type annotations
[tool.ruff.lint.pyupgrade]
keep-runtime-typing = false

# =========================================
# Type Checking Configuration
# =========================================

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = ["streamlit.*", "duckdb.*", "llama_index.*"]
ignore_missing_imports = true

# Pyright configuration
[tool.pyright]
include = ["flat_chatbot"]
exclude = ["**/__pycache__", "**/.mypy_cache", "**/.pytest_cache"]

[tool.black]
line-length = 100
target-version = ["py310"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
