# Configuration for Dagster resources

# Environment-specific configurations
environments:
  dev:
    # Infrastructure resources
    use_snowflake: false
    use_azure: true

    # IO Manager
    io_manager:
      base_dir: "outputs/dagster_storage/dev"

    # Logger
    logger:
      sink: "logs/dagster_dev.log"
      level: "INFO"

    # Alerts
    alerts:
      enabled: true
      threshold: "WARNING"

    # Azure storage configuration (for dev environment)
    azure_storage:
      account_name: "devstorageaccount"
      connection_string: "${AZURE_STORAGE_CONNECTION_STRING}"

    # Reader configurations
    readers:
      internal_sales:
        source_type: "parquet"
        path: "data/internal/sales.parquet"
        options:
          use_threads: true

      internal_need_state:
        source_type: "csv"
        path: "data/internal/need_state.csv"
        options:
          delimiter: ","
          header: true

      external_sales:
        source_type: "parquet"
        path: "data/external/sales.parquet"
        options:
          use_threads: true

    # Writer configurations
    writers:
      internal_sales_output:
        destination_type: "parquet"
        path: "outputs/internal_sales.parquet"
        options:
          compression: "snappy"

      internal_sales_percent_output:
        destination_type: "parquet"
        path: "outputs/internal_sales_percent.parquet"
        options:
          compression: "snappy"

      internal_clusters_output:
        destination_type: "parquet"
        path: "outputs/internal_clusters.parquet"
        options:
          compression: "snappy"

  staging:
    # Infrastructure resources
    use_snowflake: true
    use_azure: true

    # IO Manager
    io_manager:
      base_dir: "outputs/dagster_storage/staging"

    # Logger
    logger:
      sink: "logs/dagster_staging.log"
      level: "INFO"

    # Alerts
    alerts:
      enabled: true
      threshold: "WARNING"

    # Snowflake configuration (for staging)
    snowflake:
      account: "${SNOWFLAKE_ACCOUNT}"
      user: "${SNOWFLAKE_USER}"
      password: "${SNOWFLAKE_PASSWORD}"
      warehouse: "STAGING_CLUSTERING_WH"
      database: "STAGING_CLUSTERING_DB"

    # Azure storage configuration
    azure_storage:
      account_name: "${AZURE_STORAGE_ACCOUNT}"
      account_key: "${AZURE_STORAGE_KEY}"

    # Reader configurations
    readers:
      internal_sales:
        source_type: "azure_blob"
        container: "staging-data"
        blob_path: "internal/sales.parquet"

      internal_need_state:
        source_type: "azure_blob"
        container: "staging-data"
        blob_path: "internal/need_state.csv"

      external_sales:
        source_type: "snowflake"
        query: "SELECT * FROM STAGING_CLUSTERING_DB.RAW.EXTERNAL_SALES"

    # Writer configurations
    writers:
      internal_sales_output:
        destination_type: "azure_blob"
        container: "staging-processed"
        blob_path: "internal/sales_processed.parquet"

      internal_sales_percent_output:
        destination_type: "azure_blob"
        container: "staging-processed"
        blob_path: "internal/sales_percent.parquet"

      internal_clusters_output:
        destination_type: "snowflake"
        table_name: "STAGING_CLUSTERING_DB.PROCESSED.INTERNAL_CLUSTERS"

  prod:
    # Infrastructure resources
    use_snowflake: true
    use_azure: true

    # IO Manager
    io_manager:
      base_dir: "outputs/dagster_storage/prod"

    # Logger
    logger:
      sink: "logs/dagster_prod.log"
      level: "WARNING"

    # Alerts
    alerts:
      enabled: true
      threshold: "ERROR"
      channels: ["slack"]
      slack_webhook: "${SLACK_WEBHOOK_URL}"

    # Snowflake configuration
    snowflake:
      account: "${SNOWFLAKE_ACCOUNT}"
      user: "${SNOWFLAKE_USER}"
      password: "${SNOWFLAKE_PASSWORD}"
      warehouse: "PROD_CLUSTERING_WH"
      database: "PROD_CLUSTERING_DB"
      schema: "PUBLIC"
      role: "CLUSTERING_ROLE"

    # Azure storage configuration
    azure_storage:
      account_name: "${AZURE_STORAGE_ACCOUNT}"
      account_key: "${AZURE_STORAGE_KEY}"

    # Reader configurations
    readers:
      internal_sales:
        source_type: "snowflake"
        query: "SELECT * FROM PROD_CLUSTERING_DB.RAW.INTERNAL_SALES"

      internal_need_state:
        source_type: "snowflake"
        query: "SELECT * FROM PROD_CLUSTERING_DB.RAW.INTERNAL_NEED_STATE"

      external_sales:
        source_type: "snowflake"
        query: "SELECT * FROM PROD_CLUSTERING_DB.RAW.EXTERNAL_SALES"

    # Writer configurations
    writers:
      internal_sales_output:
        destination_type: "snowflake"
        table_name: "PROD_CLUSTERING_DB.PROCESSED.INTERNAL_SALES"

      internal_sales_percent_output:
        destination_type: "snowflake"
        table_name: "PROD_CLUSTERING_DB.PROCESSED.INTERNAL_SALES_PERCENT"

      internal_clusters_output:
        destination_type: "snowflake"
        table_name: "PROD_CLUSTERING_DB.PROCESSED.INTERNAL_CLUSTERS"
