version: "3.8"

services:
  clustering:
    image: ${DOCKER_REGISTRY:-ghcr.io}/yourusername/clustering-dagster:${TAG:-latest}
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./configs:/app/configs
      - ./outputs:/app/outputs
      - ./reports:/app/reports
      - ./cache:/app/cache
      - ./dagster_home:/app/dagster_home
    command: configs/internal_preprocessing.yml
    environment:
      - DAGSTER_HOME=/app/dagster_home
      - PYTHONPATH=/app
      - ENVIRONMENT=${ENVIRONMENT:-prod}
    ports:
      - "${DAGSTER_PORT:-3000}:3000"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    depends_on:
      postgres:
        condition: service_healthy

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.16.0
    restart: unless-stopped
    ports:
      - "${MLFLOW_PORT:-5000}:5000"
    volumes:
      - ./mlruns:/mlruns
    command: mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri /mlruns
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database for Dagster
  postgres:
    image: postgres:13
    restart: unless-stopped
    container_name: dagster-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-dagster}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dagster}
      POSTGRES_DB: ${POSTGRES_DB:-dagster}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER:-dagster}" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
