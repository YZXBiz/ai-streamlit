version: "3.8"

# Named volumes for persistent data
volumes:
  app_data:
  app_logs:
  postgres_data:

services:
  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: chatbot-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-chatbot}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend API service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chatbot-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - ./.env:/app/.env:ro
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-chatbot}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      db:
        condition: service_healthy
    command:
      [
        "uv",
        "run",
        "uvicorn",
        "backend.app.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
      ]
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chatbot-frontend
    restart: unless-stopped
    ports:
      - "8501:8501"
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - ./.env:/app/.env:ro
    environment:
      - BACKEND_URL=http://backend:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      backend:
        condition: service_healthy
    command:
      [
        "uv",
        "run",
        "streamlit",
        "run",
        "frontend/app.py",
        "--server.port=8501",
        "--server.address=0.0.0.0",
      ]
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  app_network:
    driver: bridge
