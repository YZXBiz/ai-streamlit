# GitLab CI/CD configuration for the Dagster pipeline deployment

stages:
  - validate
  - test
  - build
  - test_deployment
  - deploy

variables:
  PYTHON_VERSION: "3.10"
  DOCKER_REGISTRY: "${CI_REGISTRY}"
  DOCKER_IMAGE: "${CI_REGISTRY_IMAGE}/dagster-pipeline"
  DAGSTER_HOME: "${CI_PROJECT_DIR}/dagster_home"

# Shared configuration for Python jobs
.python_base:
  image: python:${PYTHON_VERSION}-slim
  cache:
    key: "${CI_COMMIT_REF_SLUG}-pip"
    paths:
      - .uv/
      - .pip-cache/
  before_script:
    # Install uv via curl to avoid using pip install
    - curl -Ls https://astral.sh/uv/install.sh | bash
    - export PATH="$HOME/.cargo/bin:$PATH"
    - export PIP_CACHE_DIR="${CI_PROJECT_DIR}/.pip-cache"
    - export UV_HOME="${CI_PROJECT_DIR}/.uv"

# Validate pipeline definitions
validate_pipeline:
  stage: validate
  extends: .python_base
  script:
    - uv sync
    - uv run python -c "from clustering.pipeline.definitions import defs; print('Pipeline is valid')"
  allow_failure: false  # Must pass to continue

# Run tests for the pipeline
test_pipeline:
  stage: test
  extends: .python_base
  script:
    - uv sync
    - mkdir -p ${DAGSTER_HOME}
    - uv run pytest tests/clustering-pipeline -v --cov=clustering-pipeline/src --cov-report=xml
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml

# Build Docker image for Dagster pipeline
build_image:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA -t $DOCKER_IMAGE:latest .
    - docker push $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $DOCKER_IMAGE:latest
  only:
    - main
    - tags

# Test deployment environment configuration
test_dev_environment:
  stage: test_deployment
  extends: .python_base
  script:
    - uv sync
    - mkdir -p ${DAGSTER_HOME}
    - chmod +x gitlab-ci/test_environments.py
    - ./gitlab-ci/test_environments.py --env dev
  only:
    - branches
  allow_failure: true  # Continue even if environment test fails

test_staging_environment:
  stage: test_deployment
  extends: .python_base
  script:
    - uv sync
    - mkdir -p ${DAGSTER_HOME}
    - chmod +x gitlab-ci/test_environments.py
    - ./gitlab-ci/test_environments.py --env staging
  only:
    - main
  allow_failure: true  # Continue even if environment test fails

test_prod_environment:
  stage: test_deployment
  extends: .python_base
  script:
    - uv sync
    - mkdir -p ${DAGSTER_HOME}
    - chmod +x gitlab-ci/test_environments.py
    - ./gitlab-ci/test_environments.py --env prod
  only:
    - tags
  allow_failure: false  # Must pass before production deployment

# Deploy to development environment
deploy_dev:
  stage: deploy
  extends: .python_base
  environment:
    name: development
    url: https://dev-dagster.example.com
  script:
    - uv sync
    - mkdir -p ~/.ssh
    - echo "$DEV_SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $DEV_SERVER_HOST >> ~/.ssh/known_hosts
    - |
      ssh $DEV_SERVER_USER@$DEV_SERVER_HOST << EOF
        cd $DEV_DEPLOY_PATH
        docker-compose pull
        docker-compose up -d
        echo "Deployment to DEV complete"
      EOF
  only:
    - main
  when: manual

# Deploy to staging environment
deploy_staging:
  stage: deploy
  extends: .python_base
  environment:
    name: staging
    url: https://staging-dagster.example.com
  script:
    - uv sync
    - mkdir -p ~/.ssh
    - echo "$STAGING_SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $STAGING_SERVER_HOST >> ~/.ssh/known_hosts
    - |
      ssh $STAGING_SERVER_USER@$STAGING_SERVER_HOST << EOF
        cd $STAGING_DEPLOY_PATH
        docker-compose pull
        docker-compose up -d
        echo "Deployment to STAGING complete"
      EOF
  only:
    - main
  when: manual

# Deploy to production environment
deploy_prod:
  stage: deploy
  extends: .python_base
  environment:
    name: production
    url: https://prod-dagster.example.com
  script:
    - uv sync
    - mkdir -p ~/.ssh
    - echo "$PROD_SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $PROD_SERVER_HOST >> ~/.ssh/known_hosts
    - |
      ssh $PROD_SERVER_USER@$PROD_SERVER_HOST << EOF
        cd $PROD_DEPLOY_PATH
        docker-compose pull
        docker-compose up -d
        echo "Deployment to PRODUCTION complete"
      EOF
  only:
    - tags
  when: manual
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/' 