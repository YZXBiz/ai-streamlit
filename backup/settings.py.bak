"""Application settings for the chatbot (Legacy).

This module is maintained for backward compatibility.
New code should use chatbot.config directly instead.
"""

import warnings
from typing import Any

from pydantic_settings import BaseSettings

from chatbot.config import config as config_instance

# Deprecation warning
warnings.warn(
    "The settings module is deprecated. Use chatbot.config instead.",
    DeprecationWarning,
    stacklevel=2,
)


class Settings(BaseSettings):
    """Legacy settings container (deprecated).

    This class proxies to the new Config class for backward compatibility.
    """

    def __getattr__(self, name: str) -> Any:
        """Proxy attribute access to the config instance."""
        try:
            value = getattr(config_instance, name)
            # Convert SecretStr to string if needed
            if hasattr(value, "get_secret_value"):
                return value.get_secret_value()
            return value
        except AttributeError:
            raise AttributeError(f"'Settings' object has no attribute '{name}'")


# Create singleton instance for backward compatibility
SETTINGS = Settings()
